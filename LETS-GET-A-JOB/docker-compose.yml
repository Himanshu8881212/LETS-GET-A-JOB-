services:
  # n8n Workflow Automation Service
  n8n:
    image: n8nio/n8n:latest
    container_name: lets-get-a-job-n8n
    restart: unless-stopped
    ports:
      - "5678:5678"
    environment:
      - N8N_HOST=0.0.0.0
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - WEBHOOK_URL=http://n8n:5678/
      - N8N_EDITOR_BASE_URL=http://localhost:5678
      - GENERIC_TIMEZONE=America/New_York
      - N8N_LOG_LEVEL=info
      - DB_TYPE=sqlite
      - DB_SQLITE_VACUUM_ON_STARTUP=true
      # Disable user management for single-user setup
      - N8N_USER_MANAGEMENT_DISABLED=true
      # Enable community nodes
      - N8N_COMMUNITY_PACKAGES_ENABLED=true
      # Execution settings
      - EXECUTIONS_DATA_SAVE_ON_ERROR=all
      - EXECUTIONS_DATA_SAVE_ON_SUCCESS=all
      - EXECUTIONS_DATA_SAVE_MANUAL_EXECUTIONS=true
      # Security settings
      - N8N_SECURE_COOKIE=false
    volumes:
      - n8n_data:/home/node/.n8n
      - ./n8n-workflows:/workflows:ro
      - ./docker-entrypoint-n8n.sh:/docker-entrypoint-custom.sh:ro
    networks:
      - app-network
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://localhost:5678/healthz" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    entrypoint: [ "/bin/sh", "-c" ]
    command:
      - |
        # Wait a bit for n8n to initialize
        sleep 5

        # Start n8n in background
        n8n start &
        N8N_PID=$!

        # Wait for n8n to be ready
        echo "Waiting for n8n to start..."
        for i in $(seq 1 60); do
          if wget --spider -q http://localhost:5678/healthz 2>/dev/null; then
            echo "n8n is ready!"
            break
          fi
          echo "Waiting for n8n... ($i/60)"
          sleep 2
        done

        # Import workflows if they don't exist
        if [ -d "/workflows" ] && [ "$(ls -A /workflows/*.json 2>/dev/null)" ]; then
          echo "Checking for workflows to import..."
          
          # Check if workflows already exist
          WORKFLOW_COUNT=$(sqlite3 /home/node/.n8n/database.sqlite "SELECT COUNT(*) FROM workflow_entity WHERE name IN ('Job Desc', 'Resume', 'Cover Letter', 'Eval');" 2>/dev/null || echo "0")
          
          if [ "$WORKFLOW_COUNT" -lt "4" ]; then
            echo "Importing workflows..."
            for workflow_file in /workflows/*.json; do
              if [ -f "$workflow_file" ]; then
                echo "Importing $(basename $workflow_file)..."
                # Use n8n CLI to import workflows
                n8n import:workflow --input="$workflow_file" --separate 2>/dev/null || echo "Workflow may already exist"
              fi
            done
            echo "Workflow import complete!"
          else
            echo "Workflows already imported (found $WORKFLOW_COUNT workflows)"
          fi
        fi

        # Keep n8n running
        wait $N8N_PID

  # Next.js Application Service
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: lets-get-a-job-app
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_N8N_JD_WEBHOOK_URL=http://n8n:5678/webhook/process-jd
      - NEXT_PUBLIC_N8N_RESUME_WEBHOOK_URL=http://n8n:5678/webhook/process-resume
      - NEXT_PUBLIC_N8N_COVER_LETTER_WEBHOOK_URL=http://n8n:5678/webhook/process-cover-letter
      - NEXT_PUBLIC_N8N_EVALUATION_WEBHOOK_URL=http://n8n:5678/webhook/evaluate-ats
      - NEXT_PUBLIC_N8N_TIMEOUT=120000
      - NEXT_PUBLIC_DEBUG_N8N=false
    volumes:
      - app_data:/app/data
    networks:
      - app-network
    depends_on:
      n8n:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://localhost:3000/api/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

networks:
  app-network:
    driver: bridge

volumes:
  n8n_data:
    driver: local
  app_data:
    driver: local
